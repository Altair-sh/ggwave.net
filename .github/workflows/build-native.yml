# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: build-native

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # set to true to stop all jobs if any of them fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2019]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-2019
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        # TODO: add osx

    steps:
    - name: Checkout current commit
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        submodules: false
    - name: Pull submodules
      run: git submodule update --init --recursive --depth 1

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "cmake-source-dir=./ggwave" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "CMAKE_POLICY_VERSION_MINIMUM=3.5" >> $GITHUB_ENV
      
    - name: Configure CMake
      run: >
        cmake
        -S ${{ steps.strings.outputs.cmake-source-dir  }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DGGWAVE_BUILD_EXAMPLES=OFF
        -DBUILD_SHARED_LIBS=ON
        -DGGWAVE_BUILD_TESTS=ON

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload native build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: native-libraries
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/bin/*.so
          ${{ steps.strings.outputs.build-output-dir }}/bin/*.dll
          ${{ steps.strings.outputs.build-output-dir }}/bin/*.dylib
